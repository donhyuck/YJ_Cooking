<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.ldh.exam.demo.repository.RecipeRepository">

	<select id="getRecipeById" resultType="Recipe">
		SELECT R.*
		FROM recipe AS R
		WHERE R.id = #{id}
	</select>

	<select id="getForPrintRecipe" resultType="Recipe">
		SELECT R.*,
		M.nickname AS extra__writerName,
		M.delStatus AS extra__writerLeaved
		FROM recipe AS R
		LEFT JOIN `member` AS M
		ON R.memberId = M.id
		WHERE R.id = #{id}
	</select>

	<select id="getIngredientByRecipeId" resultType="Ingredient">
		SELECT I.*
		FROM ingredient AS I
		WHERE I.recipeId = #{recipeId}
	</select>

	<select id="getForPrintRecipes" resultType="Recipe">
		SELECT R.*,
		M.nickname AS extra__writerName
		FROM recipe AS R
		LEFT JOIN `member` AS M
		ON R.memberId = M.id
		ORDER BY R.id DESC
	</select>

	<select id="getRandomRecipes" resultType="Recipe">
		SELECT R.*,
		M.nickname AS extra__writerName
		FROM (
			SELECT * FROM recipe
			ORDER BY
			(goodRP+hitCount+scrap) DESC
			LIMIT #{randomCount}
		) AS R
		LEFT JOIN `member` AS M
		ON R.memberId = M.id
		ORDER BY RAND() DESC
		LIMIT #{randomCountInAPage}
	</select>

	<select id="getMoreSuggestRecipeByTabCode" resultType="Recipe">
		SELECT R.*,
		M.nickname AS extra__writerName
		FROM recipe AS R
		LEFT JOIN `member` AS M
		ON R.memberId = M.id
		<choose>
			<when test="tabCode == 1">
				ORDER BY R.regDate DESC
			</when>
			<when test="tabCode == 2">
				ORDER BY R.hitCount DESC
			</when>
			<when test="tabCode == 3">
				ORDER BY R.scrap DESC
			</when>
			<when test="tabCode == 4">
				ORDER BY R.goodRP DESC
			</when>
		</choose>
		LIMIT #{suggestCount}
	</select>

	<select id="getRecentRecipes" resultType="Recipe">
		SELECT R.*,
		M.nickname AS extra__writerName
		FROM recipe AS R
		LEFT JOIN `member` AS M
		ON R.memberId = M.id
		ORDER BY R.regDate DESC
		<if test="limitStart != -1">
			LIMIT #{limitStart}, #{limitTake}
		</if>
	</select>

	<select id="getRecipesByGuideId" resultType="Recipe">
		SELECT R.*,
		M.nickname AS extra__writerName
		FROM (
			SELECT G.*
			FROM `guide` AS G
			WHERE 1
			<choose>
				<when test="boardId == 0">
					AND 1
				</when>
				<when test="boardId == 1">
					<if test="relId != 0">
						AND G.sortId = #{relId}
					</if>
					<if test="relId == 0">
						AND G.sortId != 0
					</if>
				</when>
				<when test="boardId == 2">
					<if test="relId != 0">
						AND G.methodId = #{relId}
					</if>
					<if test="relId == 0">
						AND G.methodId != 0
					</if>
				</when>
				<when test="boardId == 3">
					<if test="relId != 0">
						AND G.contentId = #{relId}
					</if>
					<if test="relId == 0">
						AND G.contentId != 0
					</if>
				</when>
				<when test="boardId == 4">
					<if test="relId != 0">
						AND G.freeId = #{relId}
					</if>
					<if test="relId == 0">
						AND G.freeId != 0
					</if>
				</when>
			</choose>
			) AS G
		LEFT JOIN `recipe` AS R
		ON G.recipeId = R.id
		LEFT JOIN `member` AS M
		ON R.memberId = M.id
	</select>

	<select id="getRankRecipes" resultType="Recipe">
		SELECT 
		(@num:=@num+1) AS extra__rank,
		R.*, 
		M.nickname AS extra__writerName
		FROM (SELECT @num:=0) AS rankTable,
		recipe AS R
		LEFT JOIN `member` AS M
		ON R.memberId = M.id
		ORDER BY (R.goodRP + R.hitCount + R.scrap) DESC
		LIMIT #{rankCount}
	</select>

	<select id="getManyScrapRecipes" resultType="Recipe">
		SELECT
		(@num:=@num+1) AS extra__rank,
		R.*, 
		M.nickname AS extra__writerName
		FROM (SELECT @num:=0) AS rankTable,
		recipe AS R
		LEFT JOIN `member` AS M
		ON R.memberId = M.id
		ORDER BY R.scrap DESC
		LIMIT #{manyScrapCount}
	</select>

	<select id="getRegisteredRecipes" resultType="Recipe">
		SELECT R.*,
		M.nickname AS extra__writerName
		FROM recipe AS R
		LEFT JOIN `member` AS M
		ON R.memberId = M.id
		WHERE R.memberId = #{ memberId }
		ORDER BY R.id DESC
		<if test="limitStart != -1">
			LIMIT #{limitStart}, #{limitTake}
		</if>
	</select>

	<select id="getRegisteredRecipesCount" resultType="int">
		SELECT COUNT(*)
		FROM recipe AS R
		WHERE R.memberId = #{ memberId }
	</select>

	<select id="getScrapRecipes" resultType="Recipe">
		SELECT R.*
		FROM (
			SELECT R.*,
			M.nickname AS extra__writerName
			FROM recipe AS R
			LEFT JOIN `member` AS M
			ON R.memberId = M.id
		) AS R
		LEFT JOIN scrapPoint AS SP
		ON R.id = SP.relId
		WHERE SP.memberId = #{memberId}
		GROUP BY R.id
		ORDER BY R.id DESC
	</select>

	<select id="getHaveReplyRecipes" resultType="Recipe">
		SELECT R.*,
		RE.extra__replyWriteName AS extra__replyWriteName,
		RE.body AS extra__replyBody
		FROM (
			SELECT R.*,
			M.nickname AS extra__writerName
			FROM
			recipe AS R
			LEFT JOIN `member` AS M
			ON R.memberId = M.id
		) AS R
		LEFT JOIN (
			SELECT RE.*,
			M.nickname AS extra__replyWriteName
			FROM reply AS RE
			LEFT JOIN `member` AS M
			ON RE.memberId = M.id
		) AS RE
		ON R.id = RE.relId
		WHERE RE.memberId = #{memberId}
		ORDER BY R.id DESC
	</select>

	<insert id="writeRecipe">
		INSERT INTO recipe
		SET regDate = NOW(),
		updateDate = NOW(),
		memberId = #{memberId},
		`title` = #{title},
		`body` = #{body},
		`amount` = #{amount},
		`time` = #{time},
		`level` = #{level},
		`guideId` = #{guideId},
		`ingredientId` = #{ingredientId},
		`tip` = #{tip}
	</insert>

	<insert id="insertIngredient">
		INSERT INTO ingredient
		SET regDate = NOW(),
		updateDate = NOW(),
		rowArr = #{rowArr},
		rowValueArr = #{rowValueArr},
		sauceArr = #{sauceArr},
		sauceValueArr = #{sauceValueArr}
	</insert>

	<update id="updateRecipeIdForIngredient">
		UPDATE ingredient
		SET recipeId = #{recipeId}
		WHERE id = #{ingredientId}
	</update>

	<update id="updateIngredient">
		UPDATE ingredient
		SET updateDate = NOW(),
		rowArr = #{rowArr},
		rowValueArr = #{rowValueArr},
		sauceArr = #{sauceArr},
		sauceValueArr = #{sauceValueArr}
		WHERE id = #{id}
	</update>

	<update id="modifyRecipe">
		UPDATE recipe
		<set>
			<if test="title != null and title !=''">
				title = #{title},
			</if>
			<if test="body != null and body !=''">
				`body` = #{body},
			</if>
			<if test="amount != 0">
				`amount` = #{amount},
			</if>
			<if test="time != 0">
				`time` = #{time},
			</if>
			<if test="level != 0">
				`level` = #{level},
			</if>
			<if test="tip != null and tip !=''">
				`tip` = #{tip},
			</if>
			updateDate = NOW()
		</set>
		WHERE id = #{id}
	</update>

	<delete id="deleteRecipe">
		DELETE FROM recipe
		WHERE id = #{id}
	</delete>

	<select id="getSearchRecipes" resultType="Recipe">
		SELECT R.*,
		M.nickname AS extra__writerName
		<if test="searchRange != ''">
			,G.*
			<if test="rangeType == 'ingredient' or rangeType == 'total'">
				, I.*
			</if>
		</if>
		FROM recipe AS R
		LEFT JOIN `member` AS M
		ON R.memberId = M.id
		<if test="searchRange != ''">
			LEFT JOIN (
				SELECT G.*,
				GROUP_CONCAT(C.name) AS categoryNameArr
				FROM category AS C
				INNER JOIN guide AS G
				WHERE 1 AND ( 
				C.boardId = 1 AND G.sortId = C.relId
				<if test="rangeType == 'sort' or rangeType == 'total'"> AND 1</if>
				<if test="rangeType != 'sort' and rangeType != 'total'"> AND 0</if>
				OR C.boardId = 2 AND G.methodId = C.relId
				<if test="rangeType == 'method' or rangeType == 'total'"> AND 1</if>
				<if test="rangeType != 'method' and rangeType != 'total'"> AND 0</if>
				OR C.boardId = 3 AND G.contentId = C.relId
				<if test="rangeType == 'ingredient' or rangeType == 'total'"> AND 1</if>
				<if test="rangeType != 'ingredient' and rangeType != 'total'"> AND 0</if>
				OR C.boardId = 4 AND G.freeId = C.relId
				<if test="rangeType == 'free' or rangeType == 'total'"> AND 1</if>
				<if test="rangeType != 'free' and rangeType != 'total'"> AND 0</if> 
				) GROUP BY G.recipeId
				) AS G
			ON R.id = G.recipeId
			<if test="rangeType == 'ingredient' or rangeType == 'total'">
				LEFT JOIN ingredient AS I
				ON R.id = I.recipeId
			</if>
		</if>
		<where>
			<if test="searchKeyword == '' and searchRange == ''">
				AND R.id IS NULL
			</if>
			<if test="searchKeyword != ''">
				<choose>
					<when test="keywordType == 'keywordTotal'">
						<if test="includeOption == 'selectAll'" >AND</if>
						<if test="includeOption == 'atLeastOne'" >OR</if>
						(
						R.title LIKE CONCAT('%', #{searchKeyword}, '%')
						OR R.body LIKE CONCAT('%', #{searchKeyword}, '%')
						OR R.id LIKE #{searchKeyword}
						OR M.nickname LIKE CONCAT('%', #{searchKeyword},'%')
						)
					</when>
					<when test="keywordType == 'recipeTitle'">
						<if test="includeOption == 'selectAll'" >AND</if>
						<if test="includeOption == 'atLeastOne'" >OR</if>
						R.title LIKE CONCAT('%', #{searchKeyword}, '%')
					</when>
					<when test="keywordType == 'titleAndBody'">
						<if test="includeOption == 'selectAll'" >AND</if>
						<if test="includeOption == 'atLeastOne'" >OR</if>
						(
						R.title LIKE CONCAT('%', #{searchKeyword}, '%')
						OR R.body LIKE CONCAT('%', #{searchKeyword}, '%')
						)
					</when>
					<when test="keywordType == 'recipeId'">
						<if test="includeOption == 'selectAll'" >AND</if>
						<if test="includeOption == 'atLeastOne'" >OR</if>
						R.id LIKE #{searchKeyword}
					</when>
					<when test="keywordType == 'recipeWriter'">
						<if test="includeOption == 'selectAll'" >AND</if>
						<if test="includeOption == 'atLeastOne'" >OR</if>
						M.nickname LIKE CONCAT('%', #{searchKeyword}, '%')
					</when>
					<otherwise>
						<if test="includeOption == 'selectAll'" >AND</if>
						<if test="includeOption == 'atLeastOne'" >OR</if>
						R.id IS NULL
					</otherwise>
				</choose>
			</if>
			<if test="searchRange != ''">
				<if test="includeOption == 'selectAll'" >AND</if>
				<if test="includeOption == 'atLeastOne'" >OR</if>
				G.categoryNameArr LIKE CONCAT('%', #{searchRange}, '%')
				<if test="rangeType == 'ingredient' or rangeType == 'total'">
					OR (
				    I.rowArr LIKE CONCAT('%', #{searchRange}, '%')
				    OR I.rowValueArr LIKE CONCAT('%', #{searchRange}, '%')
				    OR I.sauceArr LIKE CONCAT('%', #{searchRange}, '%')
				    OR I.sauceValueArr LIKE CONCAT('%', #{searchRange}, '%')
					)
				</if>
			</if>
		</where>
		ORDER BY R.id DESC
	</select>

	<select id="getLastInsertId" resultType="int">
		SELECT
		LAST_INSERT_ID()
	</select>

	<update id="increaseHitCount">
		UPDATE recipe
		SET hitCount = hitCount + 1
		WHERE id = #{id}
	</update>

	<select id="getRecipeHitCount" resultType="int">
		SELECT hitCount
		FROM recipe
		WHERE id = #{id}
	</select>

	<update id="increaseGoodRP">
		UPDATE recipe
		SET goodRP = goodRP + 1
		WHERE id =
		#{id}
	</update>

	<update id="decreaseGoodRP">
		UPDATE recipe
		SET goodRP = goodRP - 1
		WHERE id = #{id}
	</update>

	<update id="increaseScrapPoint">
		UPDATE recipe
		SET scrap = scrap + 1
		WHERE id = #{id}
	</update>

	<update id="decreaseScrapPoint">
		UPDATE recipe
		SET scrap = scrap - 1
		WHERE id = #{id}
	</update>

</mapper> 